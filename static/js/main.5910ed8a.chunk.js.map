{"version":3,"sources":["components/Header/Header.js","components/Nav/Nav.js","components/Results/Videocard.js","axios.js","requests.js","components/Results/Results.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","Nav","Videocard","movie","backdrop_path","instance","axios","create","baseURL","API_KEY","fetchTrending","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchMystery","fetchSciFi","fetchWestern","fetchAnimation","fetchTV","Results","useState","movies","setMovies","useEffect","a","get","requests","req","data","results","fetchData","map","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mZA4CeA,MAnCf,WACI,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,sBAEX,kBAAC,IAAD,MACA,oCAEJ,yBAAKA,UAAU,QACX,kBAAC,IAAD,MACA,wCAEJ,yBAAKA,UAAU,QACX,kBAAC,IAAD,MACA,wCAEJ,yBAAKA,UAAU,QACX,kBAAC,IAAD,MACA,2CAEJ,yBAAKA,UAAU,QACX,kBAAC,IAAD,MACA,sCAEJ,yBAAKA,UAAU,QACX,kBAAC,IAAD,MACA,wCAGR,yBAAKC,IAAI,mEAAmEC,IAAI,O,MClB7EC,MAlBf,WACI,OACI,yBAAKH,UAAU,OACX,wCACA,yCACA,sCACA,sCACA,sCACA,uCACA,uCACA,sCACA,uCACA,yCACA,0C,4CCCGI,MAdf,YAA6B,IAATC,EAAQ,EAARA,MAEhB,OACI,yBAAKL,UAAU,YACX,yBAAKC,IAAG,UAHK,wCAGL,OACcI,EAAMC,eAC1BJ,IAAI,KACN,4BACA,6BACA,8B,QCJGK,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,gCCLPC,EAAU,mCAED,GACXC,cAAc,8BAAD,OAAgCD,EAAhC,mBACbE,cAAc,4BAAD,OAA8BF,EAA9B,mBACbG,kBAAkB,2BAAD,OAA6BH,EAA7B,mBACjBI,kBAAkB,2BAAD,OAA6BJ,EAA7B,mBACjBK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,mBAAmB,2BAAD,OAA6BN,EAA7B,sBAClBO,aAAa,2BAAD,OAA6BP,EAA7B,qBACZQ,WAAW,2BAAD,OAA6BR,EAA7B,oBACVS,aAAa,2BAAD,OAA6BT,EAA7B,mBACZU,eAAe,2BAAD,OAA6BV,EAA7B,mBACdW,QAAQ,2BAAD,OAA6BX,EAA7B,uBCkBIY,MAzBf,WAAoB,IAAD,EACaC,mBAAS,IADtB,mBACRC,EADQ,KACAC,EADA,KAYf,OAVAC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEACsBpB,EAAMqB,IAAIC,EAAShB,mBADzC,cACUiB,EADV,OAEIL,EAAUK,EAAIC,KAAKC,SAFvB,kBAGWF,GAHX,4CADY,uBAAC,WAAD,wBAOZG,KACF,IAGE,yBAAKlC,UAAU,WACVyB,EAAOU,KAAI,SAAA9B,GAAK,OACb,kBAAC,EAAD,CACA+B,GAAG,QACH/B,MAAOA,SCPRgC,MAVf,WACE,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5910ed8a.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.css'\nimport HomeIcon from '@material-ui/icons/LiveTv';\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\nimport FlashOnIcon from '@material-ui/icons/FlashOn'\nimport VideoLibraryIcon from '@material-ui/icons/VideoLibrary'\nimport SearchIcon from '@material-ui/icons/Search';\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline'\n\nfunction Header() {\n    return (\n        <div className=\"header\">\n            <div className=\"icons\">\n                <div className=\"icon \n                icon--active\">\n                    <HomeIcon />\n                    <p>home</p>\n                </div>\n                <div className=\"icon\">\n                    <FlashOnIcon />\n                    <p>Trending</p>\n                </div>\n                <div className=\"icon\">\n                    <LiveTvIcon />\n                    <p>Verified</p>\n                </div>\n                <div className=\"icon\">\n                    <VideoLibraryIcon />\n                    <p>Collections</p>\n                </div>\n                <div className=\"icon\">\n                    <SearchIcon />\n                    <p>Search</p>\n                </div>\n                <div className=\"icon\">\n                    <PersonOutlineIcon />\n                    <p>Account</p>\n                </div>\n            </div>\n            <img src=\"https://press.hulu.com/wp-content/uploads/2020/02/hulu-white.png\" alt=\"\" />\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport './Nav.css'\n\nfunction Nav() {\n    return (\n        <div className=\"nav\">\n            <h5>Trending</h5>\n            <h5>Top Rated</h5>\n            <h5>Action</h5>\n            <h5>Comedy</h5>\n            <h5>Horror</h5>\n            <h5>Romance</h5>\n            <h5>Mystery</h5>\n            <h5>Sci-fi</h5>\n            <h5>Western</h5>\n            <h5>Animation</h5>\n            <h5>TV Movie</h5>\n        </div>\n    )\n}\n\nexport default Nav\n","import React from 'react'\nimport './Videocard.css'\n\nfunction Videocard({movie}) {\n    const img_base_url = \"https://image.tmdb.org/t/p/original/\";\n    return (\n        <div className=\"vid-card\">\n            <img src={\n                `${img_base_url}${movie.backdrop_path}`\n            } alt=\"\" />\n            <p></p>\n            <h2></h2>\n            <p></p>\n        </div>\n    )\n}\n\nexport default Videocard\n","import axios from 'axios';\n\n// making an instance of axios so i don't have to include the beggining of the url\n// will append the baseURL to the different requests/fetch urls\nconst instance = axios.create({\n    baseURL: \"http://api.themoviedb.org/3\",\n});\n\nexport default instance;","const API_KEY = 'dbdc332a5767d46381ec6dc929d3c6c9';\n\nexport default {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchMystery: `/discover/movie?api_key=${API_KEY}&with_genres=9648`,\n    fetchSciFi: `/discover/movie?api_key=${API_KEY}&with_genres=878`,\n    fetchWestern: `/discover/movie?api_key=${API_KEY}&with_genres=37`,\n    fetchAnimation: `/discover/movie?api_key=${API_KEY}&with_genres=16`,\n    fetchTV: `/discover/movie?api_key=${API_KEY}&with_genres=10770`,\n};","import React, { useState, useEffect } from 'react'\nimport './Results.css'\nimport Videocard from './Videocard';\nimport axios from '../../axios';\nimport requests from '../../requests'\n\nfunction Results() {\n    const [movies, setMovies] = useState([]);\n    useEffect(() => {\n        async function fetchData() {\n            const req = await axios.get(requests.fetchActionMovies);\n            setMovies(req.data.results);\n            return req;\n        }\n\n        fetchData();\n    },[]);\n\n    return (\n        <div className=\"results\">\n            {movies.map(movie => (\n                <Videocard \n                id=\"movie\"\n                movie={movie}\n                />\n            ))}\n            \n        </div>\n    )\n}\n\nexport default Results\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header'\nimport Nav from './components/Nav/Nav'\nimport Results from './components/Results/Results'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Nav />\n      <Results />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}